// cppApp_3laba_2sem.cpp: определяет точку входа для консольного приложения.
/*Результатом должна быть консольная программа с текстовым меню. Программа
должна содержать шаблонный класс для управления данными согласно заданию.
Для хранения данных необходимо выбрать оптимальный с точки зрения задания
контейнер.
1. Предусмотреть операции добавления, изменения и удаления элемента
контейнера.
2. Реализовать ввод и вывод элементов контейнера с использованием потоковых
итераторов на экран и в файл.
3. Реализовать операции поиска по заданным критериям и выборки подмножества
элементов по заданным критериям.Реализовать поиск в двух вариантах : линейный
поиск и двоичный поиск на отсортированном контейнере.
4. Предусмотреть вывод подмножества выборки на экран и в файл.

Список абонентов кабельной сети состоит из структур с полями :
фамилия, район, адрес, телефон, номер договора, дата заключения договора,
оплата установки, абонентская плата помесячно, дата последнего платежа.
Поиск по фамилии, району, дате заключения договора, дате последнего платежа
int 64*/

#include "stdafx.h"
#include "contnrutils.h"

int main()
{
	vector<abonent> vect;
	setlocale(LC_ALL, "Russian");
	load_binary(vect);
	print_v(vect);
	cout << "\nДанные загружены!\n\n";
	int choise = -1;
	string print_choise;
	do {
		cout << "Меню:\n1.Добавить.\n2.Напечатать\n3.Удалить\n4.Заменить\n5.Поиск\n0.Выход.\n";
		cin >> print_choise;
		if (correct_number(print_choise))  choise = stoi(print_choise);
		switch (choise) {
		case 1:
			try {
				add_v(vect);
			}
			catch (char *s) {
				cout << s;
			}
			break;
		case 2:
		{export_vect(vect); }
			break;
		case 3:
			try {
				delete_v(vect);
			}
			catch (char *s) {
				cout << s;
			}
			break;
		case 4:
			try {
				exchange_v(vect);
			}
			catch (char *s) {
				cout << s;
			}
			break;
		case 5:
		{export_vect(search(vect)); }
			break;
		default:
			if (choise != 0) cout << "\nНеверный ввод, введите число от 0 до 9\n";
		}
	} while (choise != 0);
	save_binary(vect);
		
	return 0;
}

